#!/usr/bin/env ruby

require "find"
require "webrick"
require "open3"
require "optparse"

class ServeIt
  def self.main
    serve_dir, command = parse_opts
    serve_dir = File.expand_path(serve_dir)
    Server.new(serve_dir, command).serve
  end

  def self.parse_opts
    options = {:serve_dir => "."}
    parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{$PROGRAM_NAME} [options] command"
      opts.on_tail("-s", "--serve-dir DIR", "Root directory for server") do |dir|
        options[:serve_dir] = dir
      end
    end

    begin
      parser.parse!(ARGV)
    rescue OptionParser::InvalidOption => e
      $stderr.puts e
      $stderr.puts parser
      exit 1
    end

    if ARGV.count == 0
      command = nil
    elsif ARGV.count == 1
      command = ARGV.fetch(0)
    else
      $stderr.write parser.to_s
      exit 1
    end

    [options.fetch(:serve_dir), command]
  end

  class Server
    def initialize(serve_dir, command)
      @mutex = Mutex.new
      @serve_dir = serve_dir
      @command = command
      @rebuilder = Rebuilder.new(@command) if @command
    end

    def serve
      server = WEBrick::HTTPServer.new(:Port => 8000)

      server.mount_proc '/' do |req, res|
        relative_path = req.path.sub(/^\//, '')
        local_abs_path = File.absolute_path(relative_path, @serve_dir)

        if relative_path == "favicon.ico"
          favicon_response(res)
        elsif File.directory?(local_abs_path)
          rebuild_if_needed
          dir_response(relative_path, local_abs_path, res)
        else
          # We're building a file
          rebuild_if_needed
          file_response(local_abs_path, res)
        end
      end

      trap 'INT' do server.shutdown end
      server.start
    end

    def favicon_response(res)
      res.status = 404
    end

    def dir_response(rel_path, local_abs_path, res)
      res.content_type = "text/html"
      res.body = (
        "<p><h3>Listing for /#{rel_path}</h3></p>\n" +
        Dir.entries(local_abs_path).select do |child|
          child != "."
        end.map do |child|
          full_child_path_on_server = File.join("/", rel_path, child)
          %{<a href="#{full_child_path_on_server}">#{child}</a><br>}
        end.join("\n")
      )
    end

    def file_response(local_abs_path, res)
      res.body = File.read(local_abs_path)
    end

    def rebuild_if_needed
      # Webrick is multi-threaded; guard against concurrent builds
      @mutex.synchronize do
        if @rebuilder
          @rebuilder.rebuild_if_needed
        end
      end
    end
  end

  class Rebuilder
    def initialize(command)
      @command = command
      @last_disk_state = nil
    end

    def rebuild_if_needed
      if disk_state != @last_disk_state
        stdout_and_stderr, success = rebuild
        if !success
          return ["Failed to build! Command output:\n\n" + stdout_and_stderr,
                  false]
        end

        # Get a new post-build disk state so we don't pick up changes made during
        # the build.
        @last_disk_state = disk_state
        [stdout_and_stderr, success]
      end
    end

    def rebuild
      puts "Running command: #{@command}"
      puts " begin build".rjust(80, "=")
      stdout_and_stderr, status = Open3.capture2e(@command)
      print stdout_and_stderr
      puts " end build".rjust(80, "=")
      [stdout_and_stderr, status.success?]
    end

    def disk_state
      Dir.glob("./**/*").map do |path|
        File.absolute_path(path)
      end.map do |path|
        [path, File.stat(path).mtime.to_s]
      end.sort
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  ServeIt.main
end
